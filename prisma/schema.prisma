// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  passwordHash  String      
  username      String        @unique @db.VarChar(20)
  role          Role          @default(USER)
  profile       Profile?
  reviews       Review[]
  notes         FilmNote[]
  lists         FilmList[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

model Profile {
  id            Int           @id @default(autoincrement())
  name          String
  userId        Int           @unique
  user          User          @relation(fields: [userId], references: [id])
}

model Film {
  id            Int           @id @default(autoincrement())
  title         String?
  reviews       Review[]
  notes         FilmNote[]
  lists         UsersFilmList[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

model Review {
  id            Int           @id @default(autoincrement())
  content       String
  rating        Int
  userId        Int
  filmId        Int
  film          Film          @relation(fields: [filmId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

model FilmNote {
  id            Int           @id @default(autoincrement())
  content       String
  userId        Int
  filmId        Int
  film          Film          @relation(fields: [filmId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

model FilmList {
  id            Int           @id @default(autoincrement())
  title         String
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  films         UsersFilmList[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

model UsersFilmList {
  filmListId   Int
  filmId       Int
  filmList     FilmList       @relation(fields: [filmListId], references: [id])
  film         Film           @relation(fields: [filmId], references: [id])
  @@id([filmListId, filmId])
}